// Generated by CoffeeScript 1.7.1
(function() {
  var ANIMATION_IDLE, ANIMATION_RUNNING, DECEL, JUMP_KEY, JUMP_VELOCITY, MAX_Y_VELOCITY, MOVE_LEFT_KEY, MOVE_RIGHT_KEY, X_VELOCITY,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DECEL = 4;

  JUMP_VELOCITY = -33;

  MAX_Y_VELOCITY = 15;

  X_VELOCITY = 10;

  JUMP_KEY = 38;

  MOVE_LEFT_KEY = 37;

  MOVE_RIGHT_KEY = 39;

  ANIMATION_IDLE = "idle";

  ANIMATION_RUNNING = "run";

  window.Player = (function(_super) {
    __extends(Player, _super);

    Player.WIDTH = 35;

    Player.HEIGHT = 60;

    function Player(levelWindow, collisionMap, assetQueue, spriteSheet, interactionKey) {
      this.levelWindow = levelWindow;
      this.collisionMap = collisionMap;
      this.assetQueue = assetQueue;
      this.spriteSheet = spriteSheet;
      this.interactionKey = interactionKey;
      this.orbColor = null;
      this.nearbyPedestal = null;
      this.xVelocity = 0;
      this.yVelocity = 0;
      this.jumpCooldown = 0;
      this.controlsMuted = this.jumpIsCoolingDown = this.interactionIsCoolingDown = this.isMovingLeft = this.isMovingRight = false;
      this.initialize();
    }

    Player.prototype.initialize = function() {
      var player, spriteSheet;
      Player.__super__.initialize.apply(this, arguments);
      spriteSheet = new createjs.SpriteSheet({
        images: [this.assetQueue.getResult("character")],
        frames: {
          width: 35,
          height: 60
        },
        animations: {
          idle: {
            frames: [1],
            next: ANIMATION_IDLE
          },
          run: {
            frames: [10, 9, 10, 11, 12, 13, 14, 13, 12, 11],
            next: ANIMATION_RUNNING
          }
        }
      });
      this.playerSprite = new createjs.Sprite(spriteSheet, ANIMATION_IDLE);
      this.addChild(this.playerSprite);
      player = this;
      $(document).keydown(function(e) {
        if (!this.controlsMuted) {
          if (e.keyCode === JUMP_KEY) {
            if (!player.jumpIsCoolingDown && player.jumpCooldown === 0 && player.onTheGround()) {
              player.jumpIsCoolingDown = true;
              player.jumpCooldown = 5;
              player.y -= 3;
              player.yVelocity = JUMP_VELOCITY;
            }
          }
          if (e.keyCode === MOVE_LEFT_KEY) {
            player.isMovingLeft = true;
            player.playerSprite.scaleX = 1;
            player.playerSprite.regX = 0;
          }
          if (e.keyCode === MOVE_RIGHT_KEY) {
            player.isMovingRight = true;
            player.playerSprite.scaleX = -1;
            player.playerSprite.regX = Player.WIDTH;
          }
          if (e.keyCode === player.interactionKey) {
            if (!(player.interactionIsCoolingDown || player.nearbyPedestal === null)) {
              player.interactionIsCoolingDown = true;
              return player.interact(player.nearbyPedestal);
            }
          }
        }
      });
      $(document).keyup(function(e) {
        if (e.keyCode === JUMP_KEY) {
          player.jumpIsCoolingDown = false;
        }
        if (e.keyCode === MOVE_LEFT_KEY) {
          player.isMovingLeft = false;
        }
        if (e.keyCode === MOVE_RIGHT_KEY) {
          player.isMovingRight = false;
        }
        if (e.keyCode === player.interactionKey) {
          return player.interactionIsCoolingDown = false;
        }
      });
      return createjs.Ticker.on("tick", this.onTick, null, false, {
        player: this
      });
    };

    Player.prototype.setNearbyPedestal = function(nearbyPedestal) {
      if (this.nearbyPedestal === null) {
        return this.nearbyPedestal = nearbyPedestal;
      }
    };

    Player.prototype.removeNearbyPedestal = function(nearbyPedestal) {
      if (this.nearbyPedestal !== null) {
        if (this.nearbyPedestal.id === nearbyPedestal.id) {
          return this.nearbyPedestal = null;
        }
      }
    };

    Player.prototype.interact = function(pedestal) {
      var asset;
      if (this.orbColor !== null) {
        if (pedestal.orbColor === null) {
          pedestal.setOrbColor(this.orbColor);
          pedestal.linkedPedestal.setOrbColor(this.orbColor);
          this.removeChild(this.orbBitmap);
          this.orbColor = null;
          return this.levelWindow.drawDoorsToCollisionMap();
        }
      } else {
        this.orbColor = pedestal.orbColor;
        asset = (function() {
          switch (this.orbColor) {
            case Color.RED:
              return this.assetQueue.getResult("redOrb");
            case Color.GREEN:
              return this.assetQueue.getResult("greenOrb");
            case Color.BLUE:
              return this.assetQueue.getResult("blueOrb");
          }
        }).call(this);
        this.orbBitmap = new Orb(asset);
        this.orbBitmap.regX = 35 / 2;
        this.orbBitmap.regY = 35 / 2;
        this.orbBitmap.x = -2;
        this.orbBitmap.y = 15;
        this.addChild(this.orbBitmap);
        createjs.Tween.get(this.orbBitmap, {
          loop: true
        }).to({
          x: 37,
          y: 45
        }, 500, createjs.Ease.backInOut()).call(this.swapBitmaps, [this]).to({
          x: -2,
          y: 15
        }, 500, createjs.Ease.backInOut()).call(this.swapBitmaps, [this]);
        pedestal.removeOrb();
        pedestal.linkedPedestal.removeOrb();
        return this.levelWindow.drawDoorsToCollisionMap();
      }
    };

    Player.prototype.swapBitmaps = function(player) {
      return player.swapChildren(player.orbBitmap, player.playerSprite);
    };

    Player.prototype.onTheGround = function() {
      return this.collisionMap.hitTest(this.x + 2, this.y + this.constructor.HEIGHT) || this.collisionMap.hitTest(this.x + 2, this.y + this.constructor.HEIGHT - 6) || this.collisionMap.hitTest(this.x + 2, this.y + this.constructor.HEIGHT - 15) || this.collisionMap.hitTest(this.x + this.constructor.WIDTH - 2, this.y + this.constructor.HEIGHT) || this.collisionMap.hitTest(this.x + this.constructor.WIDTH - 2, this.y + this.constructor.HEIGHT - 6) || this.collisionMap.hitTest(this.x + this.constructor.WIDTH - 2, this.y + this.constructor.HEIGHT - 15);
    };

    Player.prototype.inTheCeiling = function() {
      return this.collisionMap.hitTest(this.x + 2, this.y) || this.collisionMap.hitTest(this.x + 2, this.y + 10) || this.collisionMap.hitTest(this.x + 2, this.y + 20) || this.collisionMap.hitTest(this.x + this.constructor.WIDTH - 2, this.y) || this.collisionMap.hitTest(this.x + this.constructor.WIDTH - 2, this.y + 10) || this.collisionMap.hitTest(this.x + this.constructor.WIDTH - 2, this.y + 20);
    };

    Player.prototype.ranLeftIntoWall = function() {
      return this.collisionMap.hitTest(this.x, this.y + this.constructor.HEIGHT / 2);
    };

    Player.prototype.ranRightIntoWall = function() {
      return this.collisionMap.hitTest(this.x + this.constructor.WIDTH - 10, this.y + this.constructor.HEIGHT / 2);
    };

    Player.prototype.onTick = function(e, data) {
      var baseInt, inTheCeiling, modifier, onTheGround, player, xVelocity;
      player = data.player;
      onTheGround = player.onTheGround();
      inTheCeiling = player.inTheCeiling();
      if (!onTheGround) {
        if (player.yVelocity < MAX_Y_VELOCITY) {
          player.yVelocity += DECEL;
        }
        if (player.yVelocity < 0 && inTheCeiling) {
          player.yVelocity = 1;
        }
      } else {
        if (player.yVelocity > 0 && !inTheCeiling) {
          player.y = Math.floor(player.y / 100) * 100 + (90 - player.constructor.HEIGHT);
          player.yVelocity = 0;
        }
        if (player.jumpCooldown > 0) {
          player.jumpCooldown -= 1;
        }
      }
      xVelocity = 0;
      if (player.isMovingLeft) {
        xVelocity -= X_VELOCITY;
      }
      if (player.isMovingRight) {
        xVelocity += X_VELOCITY;
      }
      player.x += xVelocity;
      player.y += player.yVelocity;
      if (xVelocity !== 0 && player.playerSprite.currentAnimation !== ANIMATION_RUNNING) {
        player.playerSprite.gotoAndPlay(ANIMATION_RUNNING);
      } else if (xVelocity === 0 && player.playerSprite.currentAnimation !== ANIMATION_IDLE) {
        player.playerSprite.gotoAndPlay(ANIMATION_IDLE);
      }
      if (player.ranLeftIntoWall()) {
        player.x = Math.floor(player.x / 100) * 100 + 10;
      }
      if (player.ranRightIntoWall()) {
        baseInt = Math.floor(player.x / 100);
        modifier = baseInt % 7 === 6 ? 10 : 0;
        return player.x = baseInt * 100 + 100 - player.constructor.WIDTH - modifier;
      }
    };

    return Player;

  })(createjs.Container);

}).call(this);
