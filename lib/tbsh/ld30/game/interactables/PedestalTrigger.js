// Generated by CoffeeScript 1.7.1
(function() {
  var DIMEN;

  DIMEN = 35;

  window.PedestalTrigger = (function() {
    function PedestalTrigger(id, x, y, levelWindow, assetQueue, bitmapLayer) {
      this.id = id;
      this.x = x;
      this.y = y;
      this.levelWindow = levelWindow;
      this.assetQueue = assetQueue;
      this.bitmapLayer = bitmapLayer;
      this.orbColor = null;
      this.linkedPedestal = null;
      this.linkedDoors = [];
    }

    PedestalTrigger.prototype.setLinkedPedestal = function(linkedPedestal) {
      this.linkedPedestal = linkedPedestal;
    };

    PedestalTrigger.prototype.setLinkedDoors = function(linkedDoors) {
      this.linkedDoors = linkedDoors;
    };

    PedestalTrigger.prototype.setOrbColor = function(orbColor) {
      var door, _i, _len, _ref, _results;
      this.orbColor = orbColor;
      this.addOrbBitmap();
      _ref = this.linkedDoors;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        door = _ref[_i];
        if (door.color === this.orbColor) {
          _results.push(door.toggleState());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    PedestalTrigger.prototype.addOrbBitmap = function() {
      var asset;
      asset = (function() {
        switch (this.orbColor) {
          case Color.RED:
            return this.assetQueue.getResult("redOrb");
          case Color.GREEN:
            return this.assetQueue.getResult("greenOrb");
          case Color.BLUE:
            return this.assetQueue.getResult("blueOrb");
        }
      }).call(this);
      this.orbBitmap = new createjs.Bitmap(asset);
      this.orbBitmap.x = this.x - DIMEN / 2;
      this.orbBitmap.y = this.y - DIMEN / 2;
      return this.bitmapLayer.addChild(this.orbBitmap);
    };

    PedestalTrigger.prototype.removeOrb = function() {
      var door, _i, _len, _ref;
      _ref = this.linkedDoors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        door = _ref[_i];
        if (door.color === this.orbColor) {
          door.toggleState();
        }
      }
      this.orbColor = null;
      return this.bitmapLayer.removeChild(this.orbBitmap);
    };

    PedestalTrigger.prototype.watchPlayer = function(player) {
      return createjs.Ticker.on("tick", this.onTick, null, false, {
        player: player,
        trigger: this
      });
    };

    PedestalTrigger.prototype.unwatchPlayer = function() {
      return createjs.Ticker.off("tick", this.onTick);
    };

    PedestalTrigger.prototype.onTick = function(e, data) {
      var player, playerBottom, playerLeft, playerRight, playerTop, trigger, triggerBottom, triggerLeft, triggerRight, triggerTop;
      player = data.player;
      trigger = data.trigger;
      playerLeft = player.x + 2;
      playerRight = player.x + Player.WIDTH - 2;
      playerTop = player.y;
      playerBottom = player.y + Player.HEIGHT;
      triggerLeft = trigger.x - DIMEN / 2;
      triggerRight = trigger.x + DIMEN / 2;
      triggerTop = trigger.y - DIMEN / 2;
      triggerBottom = trigger.y + DIMEN / 2;
      if (((playerLeft > triggerLeft && playerLeft < triggerRight) || (playerRight > triggerLeft && playerRight < triggerRight)) && ((playerBottom > triggerTop && playerBottom < triggerBottom) || (playerTop > triggerTop && playerTop < triggerBottom))) {
        return player.setNearbyPedestal(trigger);
      } else {
        return player.removeNearbyPedestal(trigger);
      }
    };

    return PedestalTrigger;

  })();

}).call(this);
