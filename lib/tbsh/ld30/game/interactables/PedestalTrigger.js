// Generated by CoffeeScript 1.7.1
(function() {
  var DIMEN,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DIMEN = 35;

  window.PedestalTrigger = (function(_super) {
    __extends(PedestalTrigger, _super);

    function PedestalTrigger(id, x, y, levelWindow, assetQueue, bitmapLayer) {
      this.id = id;
      this.levelWindow = levelWindow;
      this.assetQueue = assetQueue;
      this.bitmapLayer = bitmapLayer;
      PedestalTrigger.__super__.constructor.call(this, x, y, DIMEN, DIMEN, DIMEN / 2, DIMEN / 2);
      this.orbColor = null;
      this.linkedPedestal = null;
      this.linkedDoors = [];
    }

    PedestalTrigger.prototype.setLinkedPedestal = function(linkedPedestal) {
      this.linkedPedestal = linkedPedestal;
    };

    PedestalTrigger.prototype.setLinkedDoors = function(linkedDoors) {
      this.linkedDoors = linkedDoors;
    };

    PedestalTrigger.prototype.setOrbColor = function(orbColor) {
      var door, _i, _len, _ref, _results;
      this.orbColor = orbColor;
      this.addOrbBitmap();
      _ref = this.linkedDoors;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        door = _ref[_i];
        if (door.color === this.orbColor) {
          _results.push(door.toggleState());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    PedestalTrigger.prototype.addOrbBitmap = function() {
      var asset;
      asset = (function() {
        switch (this.orbColor) {
          case Color.RED:
            return this.assetQueue.getResult("redOrb");
          case Color.GREEN:
            return this.assetQueue.getResult("greenOrb");
          case Color.BLUE:
            return this.assetQueue.getResult("blueOrb");
        }
      }).call(this);
      this.orbBitmap = new createjs.Bitmap(asset);
      this.orbBitmap.x = this.x;
      this.orbBitmap.y = this.y;
      this.orbBitmap.regX = DIMEN / 2;
      this.orbBitmap.regY = DIMEN / 2;
      return this.bitmapLayer.addChild(this.orbBitmap);
    };

    PedestalTrigger.prototype.removeOrb = function() {
      var door, _i, _len, _ref;
      _ref = this.linkedDoors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        door = _ref[_i];
        if (door.color === this.orbColor) {
          door.toggleState();
        }
      }
      this.orbColor = null;
      return this.bitmapLayer.removeChild(this.orbBitmap);
    };

    PedestalTrigger.prototype.onTick = function(e, data) {
      var player, trigger;
      PedestalTrigger.__super__.onTick.call(this, e, data);
      player = data.player;
      trigger = data.trigger;
      if (trigger.isTriggered) {
        return player.setNearbyPedestal(trigger);
      } else {
        return player.removeNearbyPedestal(trigger);
      }
    };

    return PedestalTrigger;

  })(Trigger);

}).call(this);
